scriptencoding=utf-8
"===============================================================================
"	Brief	個人Vim設定ファイル 通常
"	Author	KORYUOH
"	Create	2014/10/02
"	Update	2024/09/06
"	Version	6.15
"===============================================================================

" テストコマンドを有効化するか
let s:basic_test_command_enable = 0

"エンコードの指定 UTF-8
"set encoding=UTF-8
"set fileencoding=UTF-8
"set termencoding=UTF-8

"エンコードの指定 Shift-JIS
"set encoding=cp932
"set fileencoding=cp932
"set termencoding=cp932

"ほかのから拾ってみた
if has('gui_running')
	set encoding=utf-8
	set bomb
	set fileencodings=ucs-bom,utf-8,iso-2022-jp,cp932,sjis,euc-jp,cp20932
endif
"set termencoding=utf-8
"set fileencoding=utf-8
set encoding=utf-8
set fileencodings=ucs-bom,utf-8,iso-2022-jp,cp932,sjis,euc-jp,cp20932

"スワップファイルはいらない
set noswapfile

" バックアップ用のフォルダがあれば
if isdirectory( expand('~/.vimbackup'))
	set backupdir=~/.vimbackup
	set backup
else
	"バックアップファイルもいらない
	set nobackup
endif

"undo用のフォルダがあるなら
if has( 'persistent_undo' ) && isdirectory(expand("~/.vimundo"))
	"undoファイルの保存先とundoファイルの生成
	set undodir=~/.vimundo
	set undofile
else
	"undoファイルも作らない
	set noundofile
endif

" 折りたたみの保存場所があればそこに
if isdirectory(expand('~/.vimviews'))
	set viewdir=~/.vimviews

	" 折りたたみはシンタックス準拠
	augroup CPP_FoldMethods
		autocmd!
		" autocmd FileType cpp setlocal foldmethod=syntax
		autocmd BufRead *.c,*.cpp,*.h,*.hpp loadview
		autocmd BufWrite *.c,*.cpp,*.h,*.hpp mkview
	augroup END

endif

"分割されたのは下
set splitbelow

"分割されたのは右
set splitright

"タグファイルの指定
" set tags=tags,./tags,../tags,./**/tags
set tags=tags,./tags,../tags

"表示タブ幅
set tabstop=4
"挿入タブ幅
set shiftwidth=4
"タブをスペースに展開しない
set noexpandtab
"行番号表示
set number
"長い行の折り返しをしない
set nowrap
"指定文字数を超えた場合、空白の跡で折り返さない
set textwidth=0
"カーソル行の色を変える
set cursorline

"ウィンドウの上下端でカーソル先の視界をいくつ確保するか
set scrolloff=8
"ウィンドウの左右端でカーソル先の司会をいくつ確保するか
set sidescrolloff=16
"左右端でスクロールが発生したときに何文字スクロールさせるか
set sidescroll=1

"インクリメント/デクリメントを0埋めされてても10進数として増減させる
set nf=

"タブを可視化
set list listchars=tab:\>\-

" スペルチェックで日本語は無視
set spelllang+=cjk

" Default( windows ).
"set guioptions=egmrLT
"gvimでメニューとツールバーを消す
set guioptions=egrL

"日付の挿入
nmap <F5> <ESC><ESC>a<C-R>=strftime("%Y/%m/%d")<CR><ESC>

"時間の挿入
nmap <F6> <ESC><ESC>a<C-R>=strftime("%H:%M")<CR><ESC>

" ; <=> : 入れ替え
nmap ; :

" Ctrl + hで左のタブへ移動する
nmap <C-h> gT

" Ctrl + lで右のタブへ移動する
nmap <C-l> gt

nmap tq :tabclose<CR>

" Ctrl + Enterで改行挿入
nmap <C-Enter> I<CR><ESC>

" Ctrl + 十字キーでウィンドウ幅操作
nmap <C-Right> <C-W>>
nmap <C-Left> <C-W><
nmap <C-Up> <C-W>-
nmap <C-Down> <C-W>+
" Ctrl + Shift + 十字キーでウィンドウ幅大幅操作
nmap <C-S-Right> 20<C-W>>
nmap <C-S-Left> 20<C-W><
nmap <C-S-Up> 5<C-W>-
nmap <C-S-Down> 5<C-W>+

" 対応カッコまで飛ぶ
nmap <C-[> %

" ESC二回押しでサーチのハイライト非表示
nmap <silent><ESC><ESC> :nohlsearch<CR>

" 香り屋版以外のvimで行う
if !has('kaoriya')
	"===============
	"= 検索周り
	"===============
	" インクリメンタルサーチを有効
	set incsearch
	" 検索時に大文字小文字を無視
	set ignorecase
	" 大文字、小文字を含む場合は区別
	set smartcase
	" 検索時に最後まで行ったらはじめから
	set wrapscan
	
	"===============
	"= 編集周り
	"===============
	" コマンドラインの高さ
	set cmdheight=2
	" 常にステータス行を表示
	set laststatus=2
	"
	set imsearch=0
	" 自動インデント
	set autoindent
	" 
	set nobuflisted
	" バックスペースでインデントや行頭、行末を消せる
	set backspace=indent,eol,start
	" 括弧入力時に対応括弧の表示
	set showmatch
	" 日本語用 入力時自動折り返し
	set formatoptions+=mM
	"ルーラー
	set ruler
	" タイトル表示
	set title
	
	"===============
	"= コマンド周り
	"===============
	" コマンドをステータス行に表示
	set showcmd
	" 強化されたコマンドライン補完
	if has('wildmenu')
		set wildmenu
	endif
	
	"===============
	"= その他
	"===============
	" プラットホーム依存の特別な設定
	" WinではPATHに$VIMが含まれていないときにexeを見つけ出せないので修正
	if has('win32') && $PATH !~? '\(^\|;\)' . escape($VIM, '\\') . '\(;\|$\)'
		let $PATH = $VIM . ';' . $PATH
	endif
	
endif

"_vimrcの再読み込み
let s:vimrcfold= fnamemodify( expand('<sfile>') , ':h')
command! ReloadVimrc execute 'source ' . s:vimrcfold.'/_vimrc'

" vimrcを指定で読み込めるタイプにする
function! s:openvimrc(default_filename,fname)
	let l:open_file = a:default_filename
	if !empty(a:fname)
		let l:open_file = ''.a:fname
	endif
	execute 'tabnew '.s:vimrcfold . '/' .l:open_file
endfunction


command! -nargs=? OpenVimrc call s:openvimrc('_vimrc', '<args>')

command! OpenGvimrc execute 'tabnew '.s:vimrcfold . '/_gvimrc'

command! SourceThis source %:p


" プラグイン管理の編集
command! OpenDein execute 'tabnew ' . s:vimrcfold . '/dein.toml'
command! OpenDeinLazy execute 'tabnew ' . s:vimrcfold . '/lazy_dein.toml'

" 折りたたみの一時変更
augroup ChangeFold
	autocmd!
	autocmd InsertEnter {*.h,*.cpp,*.hpp,*.c,*.inc} if !exists( 'w:last_fdm' ) | let w:last_fdm=&foldmethod | setlocal foldmethod=manual | echo 'OperationManual' | endif
	autocmd InsertLeave,WinLeave {*.h,*.cpp,*.hpp,*.c,*.inc} if exists( 'w:last_fdm' ) | let &l:foldmethod=w:last_fdm | unlet w:last_fdm | echo 'OperationBefore' | endif
augroup END

" バイナリ編集時のバイナリエディタ化
augroup BinFileEdit
	autocmd!
	autocmd BufReadPre * if &binary | let &binary=0 | endif
	autocmd BufReadPre *.bin,*.sav let &binary=1
	autocmd BufReadPost * if &binary | silent %!xxd -g 1
	autocmd BufReadPost * set filetype=xxd | endif
	autocmd BufWritePre * if &binary | silent %!xxd -r | endif
	autocmd BufWritePost * if &binary | silent %xxd -g 1
	autocmd BufWritePost * set nomod | endif
augroup END

"全角スペースの表示
function! WideSpace()
	highlight WideSpace cterm=underline ctermfg=lightblue guibg=darkgray
endfunction

if has('syntax')
	augroup WideSpace
		autocmd!
		autocmd ColorScheme * call WideSpace()
		"autocmd VimEnter,WinEnter,BufRead * let w:m1=matchadd('WideSpace' , '　')
		autocmd VimEnter,WinEnter,BufRead * match WideSpace /　/
	augroup END
	call WideSpace()
endif

augroup VimSettings
	autocmd!
	autocmd Bufread,WinEnter,VimEnter {_basic,_plugin} set filetype=vim
augroup END

augroup vimrc_local
	autocmd!
	autocmd BufNewFile,BufReadPost * call s:vimrc_load_local(expand('<afile>:p:h'))
augroup END
function! s:vimrc_load_local(locate) abort
	let l:files = findfile('.vimrc_local' , escape(a:locate , ' ').';',-1)
	for i in reverse( filter( l:files ,'filereadable(v:val)'))
		source `=i`
	endfor
endfunction

"virtualモードの時にスターで選択位置のコードを検索するようにする"
xnoremap * :<C-u>call <SID>VSetSearch()<CR>/<C-R>=@/<CR><CR>
xnoremap # :<C-u>call <SID>VSetSearch()<CR>?<C-R>=@/<CR><CR>
function! s:VSetSearch()
  let temp = @s
  norm! gv"sy
  let @/ = '\V' . substitute(escape(@s, '/\'), '\n', '\\n', 'g')
  let @s = temp
endfunction

" ファイルの名前+カーソル行数をクリップボードにコピー
command! -range -nargs=* ClipFileName call s:clip_file_name(<line1>,<line2>)
function! s:clip_file_name(start,end)

	let l:diff = a:start - a:end

	if l:diff != 0
		let l:lines = a:start.'-'.a:end
	else
		let l:lines = line('.')
	endif

	let @*=''.expand('%:t').':'.l:lines
	echo @*
endfunction

" UUIDを出力する
" ハイフンの処理 0 : 消す
let g:uuid_pyhen = 0
function! UuidGen(type)abort
	if !has('python3')
		finish
	endif

python3 << endpy
import vim
from uuid import uuid4
vim.command("let l:new_uuid='{}'".format(str(uuid4())))
endpy
	if g:uuid_pyhen == 0
		let l:new_uuid = substitute(l:new_uuid , "-" , "", "g")
	if a:type == "lower"
		return tolower(l:new_uuid)
	else
		return toupper(l:new_uuid)
	endif
endfunction

function! s:Uuid(arg)
	execute "normal a" . UuidGen(a:arg)
endfunction

" UUIDでUUIDを入れるコマンド 引数にlowerを入れると小文字で出力
command! -nargs=? UUID call s:Uuid('<args>')

command! Hex2Char substitute/\\u\(\x\{4\}\)/\=nr2char('0x'.submatch(1),1)/g

"vim:set enc=utf-8:set bomb
