scriptencoding=utf-8
"===============================================================================
"	Brief	個人Vim設定ファイル Plugin
"	Author	KORYUOH
"	Create	2014/10/02
"	Update	2016/08/10
"	Version	5.50
"===============================================================================
"===============================================================================
"NEOBUNDLEの設定
"===============================================================================
" vim起動時のみruntimepathにneobundle.vimを追加
if has('vim_starting')
	set nocompatible
  " neobundle をインストールしていない場合は自動インストール
  if !isdirectory(expand("~/.vim/neobundle/neobundle.vim/"))
    echo "install neobundle..."
    " vim から呼び出しているだけ neobundle.vim のクローン
    :call system("git clone git://github.com/Shougo/neobundle.vim ~/.vim/neobundle/neobundle.vim")
  endif
  set runtimepath+=~/.vim/neobundle/neobundle.vim
endif


" neobundle.vimの初期化 
call neobundle#begin(expand('~/.vim/neobundle'))
" NeoBundleを更新するための設定
NeoBundleFetch 'Shougo/neobundle.vim'

" 読み込むプラグインを記載
NeoBundle 'Shougo/unite.vim'
NeoBundle 'Shougo/neomru.vim'
NeoBundle 'Shougo/unite-outline'
NeoBundle 'Shougo/neocomplete'
NeoBundle 'sgur/unite-qf'
NeoBundle 'koron/codic-vim'
NeoBundle 'rhysd/unite-codic.vim'
NeoBundle 'terryma/vim-multiple-cursors'
NeoBundle 'AndrewRadev/switch.vim'
NeoBundle 'itchyny/lightline.vim'
NeoBundle 'ujihisa/unite-colorscheme'
NeoBundle 'mattn/flappyvird-vim'
NeoBundle 'glidenote/memolist.vim'
NeoBundle 'tomtom/tcomment_vim'
NeoBundle 'tomasr/molokai'		"ColorScheme
NeoBundle 'mattn/invader-vim'   

" neobundle.vimの初期化終了
call neobundle#end()

"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
" プラグインのキーマッピング
"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

nmap <leader>f :Unite file -buffer-name=UniteFiler<CR>
nmap <leader>F :Unite file:**/*.{cpp,h} -buffer-name=UniteFiler<CR>
nmap <leader>mf :Unite file_mru -buffer-name=UniteFiler<CR>
nmap <leader>vg :Unite vimgrep -buffer-name=UniteQuickFix<CR>
nmap <leader>cw :UniteResume -buffer-name=UniteQuickFix<CR>
nmap <leader>co :UniteResume UniteOutLiner<CR>
nmap <leader>ucw :Unite qf -buffer-name=UniteQuickFix<CR>
nmap <leader>ul :Unite line -buffer-name=UniteOutLiner<CR>
nmap <leader>ut :Unite tab -buffer-name=UniteOutLiner<CR>
nmap <leader>uc :Unite codic<CR>
nmap <C-W>u :Unite outline:! -buffer-name=UniteOutLiner<CR>
"### [Memolist] 系列
nmap <leader>mn :MemoNew<CR>
nmap <leader>ml :MemoList<CR>
nmap <leader>mg :MemoGrep<CR>

" XXXXX[Switch.vim]XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

let g:switch_mapping = "-"


" XXXXX[MemoList.vim]XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

if isdirectory(expand("~/.memolist"))
	let g:memolist_path = expand("~/.memolist")
endif

"let g:memolist_memo_suffix = "txt"
"let g:memolist_memo_date = "%Y-%m-%d %H:%M"
"let g:memolist_memo_date = "epoch"
"let g:memolist_memo_date = "%D %T"
"let g:memolist_prompt_tags = 1
"let g:memolist_prompt_categories = 1
"let g:memolist_qfixgrep = 1
"let g:memolist_vimfiler = 1
"let g:memolist_template_dir_path = "path/to/dir"

let g:memolist_unite        = 1
let g:memolist_unite_source = "file"
let g:memolist_unite_option = "-auto-preview -start-insert"

function! s:UniteMemoList()
	let l:memolist_path = unite#util#path2directory(g:memolist_path)
	call unite#start([['file_rec',l:memolist_path ]])
endfunction

command! UniteMemoList call s:UniteMemoList()

" XXXXX[tcomment_vim]XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
" et g:tcommentMapLeader1	= '<C-_>'		 " (default: '<c-_>')
" et g:tcommentMapLeader2	= '<Leader>'	 " (default: '<Leader>_')
" et g:tcommentMapLeaderOp1	= 'gc'			 " (default: 'gc')
" et g:tcommentMapLeaderOp2	= 'gC'			 " (default: 'gC')

" 読み込んだプラグインも含め、ファイルタイプの検出、ファイルタイプ別プラグイン/インデントを有効化する
filetype plugin indent on

" インストールのチェック
NeoBundleCheck

